day14 进程管理
储备知识：
		同步与异步：任务的启动/调用方式
			同步：
				 多个任务是同步执行的指的是启动一个任务之后，必须在原地等待该任务运行完毕之后，才能启动下一个任务并且运行
				
			异步：
				 提交完一个任务之后，不用在原地等待该任务运行完毕，就能立即提交下一个任务执行

      并发/并行 串行：指的是任务给人展现出的运行的效果
			   并发/并行：多个任务是”同时“运行的
			
			   串行：一个任务运行完毕，才能运行下一个


		阻塞与非阻塞：任务在操作系统中的运行状态

			会引起阻塞的事项：
				1、硬盘io
				2、网络io
				3、sleep 
				4、read命令

	一、进程的结构：树形结构
		0号：整个系统的祖宗进程
		
		0号进程会产生两个进程1号和2号
		
			1号：是所有用户态进程的祖宗
			2号：是所有内核台进程的祖宗

	二、进程的状态
	
		分为两大类：
		
			活着的
				1、运行着的-------》R
					正在执行：手里拿着cpu正在运行
					就绪（随时可以投入运行）：正在等待操作系统分配cpu，一旦分配到，就可以立即投入运行
				
				2、阻塞的----》S或D
					S：可中断的睡眠
						可以用例如ctrl+c, kill -9 pid号命令来终止
					
					D: 不可中断睡眠（因为存储设备太忙了响应不过来了）
						不可以被中止（linux系统为了防止数据丢失的一种保护机制）

  		死了的
				1、僵尸进程-----》Z
					僵尸进程是操作系统的一种优化机制
						一个进程死掉之后，会把其占用的cpu、内存资源都释放掉，但是会保留该进程的状态信息
						例如pid号、存在过的一些运行信息
						这些保留下来的信息都是操作系统给父进程准备的
	
					每个进程死掉之前都会进入僵尸进程的状态
					
					僵尸进程通常由父进程来回收
					
				2、退出的进程---》X几乎看不到
		
		
		
		补充：
			+号：前台运行的进程
			s：表示该进程是会话（session）的领导/领导进程，用来接收用户请求，然后自己不干给儿子进程去干
			
			l：当前进程是多线程模式
		   	
			<: 低优先级的进程
			
			T：暂停

USER:    运行进程的用户
PID：    进程ID
%CPU:    CPU占用率
%MEM:    内存占用率，指的是实际内存RSS占用率
VSZ：    占用虚拟内存，单位：KB（killo Bytes）
         VSZ是指已分配的线性空间大小，这个大小通常并不等于程序实际用到的内存大小，产生这个的可能性很多 
         比如内存映射，共享的动态库，或者向系统申请了更多的堆，都会扩展线性空间大小。

RSS:    占用实际内存，单位：KB（killo Bytes）
        RSZ是Resident Set Size，常驻内存大小，即进程实际占用的物理内存大小
TTY：    进程运行的终端
STAT：   进程状态     man ps (/STATE)            
      R     运行
      S     可中断睡眠 Sleep，即在睡眠的过程中可以接收信号唤醒=》执行的IO操作可以得到硬件设备的响应
      D     不可中断睡眠，即在睡眠的过程中不可以接收信号唤醒=》执行的IO操作得不到硬件设备的响应
      T     停止的进程 
      Z     僵尸进程
      X     死掉的进程(几乎看不见，因为死了就立即回收了)
      <  标注了<小于号代表优先级较高的进程
      N     N代表优先级较低的进程
      s     该进程包含子进程，该进程自己是整个会话的领导者
      +     +表示是前台的进程组
      l     小写字母l，代表以线程的方式运行，即多线程
      |     管道符号代表多进程
START:    进程的启动时间
TIME：    进程占用CPU的总时间
COMMAND： 进程文件，进程名
          带[]号的代表内核态进程
          不带[]号的代表用户态进程
补充Centos9中还有一个大写字母I的进程状态
大写字母"I"代表的进程状态是"Idle kernel thread"，这意味着该进程是一个空闲的内核线程，不是用户模式下的空闲进程。这个状态通常只应用于内核线程，用户进程通常不会有这个状态。


1、什么是MMU(内存是超配的)
在实践过程中，碰到了这样的问题，程序需要使用4G内存，而可用物理内存小于4G，导致程序不得不降低内存占用。
为了解决此类问题，现代CPU引入了MMU(Memory Management Unit内存管理单元)。
MMU 的核心思想是利用虚拟地址替代物理地址，即CPU寻址时使用虚址，由MMU负责将虚址映射为物理地址。 MMU的引入，解决了对物理内存的限制，对程序来说，就像自己在使用4G内存一样。

2、什么是内存分页
内存分页(Paging)是在使用MMU的基础上，提出的一种内存管理机制。
它将虚拟地址和物理地址按固定大小(4K)分割成页(page)和页帧(page frame)，并保证页与页帧的大小相同。
这种机制，从数据结构上，保证了访问内存的高效，并使0S能支持非连续性的内存分配。

3、什么是页表
在上文中提到，虚拟地址与物理地址需要通过映射，才能使CPU正常工作。
而映射就需要存储映射表。在现代CPU架构中，映射关系通常被存储在物理内存上一个被称之为页表(page table)的地方。

4、进一步优化，引入TLB(Translation lookaside buffer，页表寄存器缓冲)
由上一节可知，页表是被存储在内存中的。我们知道CPU通过总线访问内存，肯定慢于直接访问寄存器的。为了进一步优化性能，现代CPU架构引入了TLB，用来缓存一部分经常访问的页表内容。


	三、top命令结果解析
		load average平均负载（负载指的是几个活跃的活要干）：在一段时间内，处于R状态的进程数+不可中断D睡眠的进程数
		
			平均负载是用来要衡量系统的繁忙程度
			
			
			4个cpu：
				平均负载为3，代有个3个活跃进程，---》低负载
				平均负载为4，代有个4个活跃进程，---》满负载
				平均负载>4，                    ---》超负载
			
			
			
			
		cpu的利用率：反应的是cpu的使用情况
